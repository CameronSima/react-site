import React from 'react'

var config = require('../../config')
var helpers = require('../../helpers')

var Comment = React.createClass({

  timeStampToHoursAgo: function(date) {
    var round = function(value) {
      return Math.max(Math.round(value * 10) / 10, 2.7).toFixed(0)
    }
    console.log(new Date(date).toLocaleString())
    var unixTime = Date.parse(date)
    var now = Date.now()
    return round((now - unixTime) / 3600000)
  },

  getTimeStamp: function(date) {
    var ts = this.timeStampToHoursAgo(date)
    if (ts > 23) {
      return helpers.formatDate(date)
    } else {
      return ts + " hours ago"
    }
  },

  render: function () {
    return (
    <div className="comment">
    <span>
      <a className="commentAuthor">{ this.props.author.username }</a>
       { ' ' + this.props.text }
    </span>
    <br></br>
    <div className="commentActions">
      <a className="likeLink">Like</a>
      <a className="replyLink">Reply</a>
      <a className="dislikeLink">Dislike</a>
      <span className="timestamp">{this.getTimeStamp(this.props.date)}</span>
    </div>
    </div>
    )
  }
})


var CommentBox = React.createClass({
  handleCommentSubmit: function (comment) {
    var comments = this.state.data
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    // comment.id = Date.now()
    var newComments = comments.concat([comment])
    this.setState({data: newComments})
    $.ajax({
      url: config.apiUrl + 'comments',
      dataType: 'json',
      type: 'POST',
      data: comment,
      xhrFields: { withCredentials: true },
      success: function (data) {
        this.setState({data: data})
      }.bind(this),
      error: function (xhr, status, err) {
        this.setState({data: comments})
        console.error(this.props.url, status, err.toString())
      }.bind(this)
    })
  },
  getInitialState: function () {
    return {data: [] }
  },

  render: function () {
    return (
    <div className="commentBox">
      <CommentList comments={ this.props.comments } />
      <CommentForm threadId={ this.props.threadId } onCommentSubmit={this.handleCommentSubmit} />
    </div>
    )
  }
})

var CommentList = React.createClass({
  render: function () {
    if (this.props.comments) {
      var commentNodes = this.props.comments.map(function (comment) {
        return (
        <Comment author={ comment.author } 
                 text={ comment.text } 
                 date={ comment.date }
                 key={ comment._id} >
          { comment.text }
        </Comment>
        )
      })
      return (
      <div className="commentList">
        { commentNodes }
      </div>
      )
    } else {
      return (
        <div></div> 
      )
    }
  } 
})

var CommentForm = React.createClass({
  getInitialState: function () {
    return { text: '' }
  },
  handleTextChange: function (e) {
    this.setState({text: e.target.value})
  },
  handleSubmit: function (e) {
    e.preventDefault()
    var text = this.state.text.trim()
    if (!text) {
      return
    }
    this.props.onCommentSubmit({ text: text, thread: this.props.threadId })
    this.setState({ text: ''})
  },
  render: function () {
    return (
    <form className="commentForm" onSubmit={this.handleSubmit}>
      <input
        type="text"
        placeholder="Comment"
        value={this.state.text}
        onChange={this.handleTextChange} />
      <input type="submit" value="Post" />
    </form>
    )
  }
})

module.exports = CommentBox